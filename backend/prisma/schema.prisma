generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  client
}

enum TokenStatus {
  owned
  listed
  reserved
  spent
}

enum ListingStatus {
  open
  filled
  canceled
}

enum CallStatus {
  ringing
  active
  ended
  failed
}

enum Platform {
  ios
}

enum PaymentType {
  ADMIN_SALE
  P2P_SALE
}

enum PaymentStatus {
  succeeded
  refunded
  failed
}

enum Currency {
  EUR
}

model User {
  id           String    @id @default(uuid()) @db.Char(36)
  clerkUserId  String    @unique @db.VarChar(191)
  email        String    @unique @db.VarChar(191)
  role         Role
  tokens       Token[]
  listings     Listing[] @relation("UserListings")
  tradesBuy    Trade[]   @relation("TradesBuy")
  tradesSell   Trade[]   @relation("TradesSell")
  callsOut     Call[]    @relation("CallsOut")
  callsIn      Call[]    @relation("CallsIn")
  devices      Device[]
  ledger       Ledger[]
  payments     Payment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Token {
  id               String      @id @default(cuid()) @db.VarChar(191)
  ownerId          String?     @db.Char(36)
  owner            User?       @relation(fields: [ownerId], references: [id])
  remainingMinutes Int         @default(60)
  status           TokenStatus @default(owned)
  mintedByAdmin    Boolean     @default(false)
  listing          Listing?
  ledgerEntries    Ledger[]    @relation("TokenLedger")
  callCharges      CallCharge[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@index([ownerId, status])
}

model Listing {
  id         Int           @id @default(autoincrement())
  sellerId   String        @db.Char(36)
  seller     User          @relation("UserListings", fields: [sellerId], references: [id])
  tokenId    String        @unique @db.VarChar(191)
  token      Token         @relation(fields: [tokenId], references: [id])
  priceCents Int
  status     ListingStatus @default(open)
  trade      Trade?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([sellerId, status])
}

model Trade {
  id         Int      @id @default(autoincrement())
  listingId  Int      @unique
  listing    Listing  @relation(fields: [listingId], references: [id])

  buyerId    String   @db.Char(36)
  buyer      User     @relation("TradesBuy", fields: [buyerId], references: [id])

  sellerId   String   @db.Char(36)
  seller     User     @relation("TradesSell", fields: [sellerId], references: [id])

  totalCents Int

  // 1:1 spätná väzba na Payment
  payment    Payment? @relation("PaymentTrade")

  createdAt  DateTime @default(now())

  @@index([buyerId])
  @@index([sellerId])
}

model Payment {
  id                    Int           @id @default(autoincrement())
  type                  PaymentType
  status                PaymentStatus @default(succeeded)
  userId                String        @db.Char(36)
  user                  User          @relation(fields: [userId], references: [id])
  stripeSessionId       String        @unique @db.VarChar(191)
  stripePaymentIntentId String?       @db.VarChar(191)
  amountCents           Int
  currency              Currency      @default(EUR)

  // 1:1 väzba na Trade – tu je dôležité PRIDAŤ @unique
  tradeId               Int?          @unique
  trade                 Trade?        @relation("PaymentTrade", fields: [tradeId], references: [id])

  tokensCount           Int?
  createdAt             DateTime      @default(now())

  @@index([userId, type, status])
}


model Ledger {
  id           Int      @id @default(autoincrement())
  userId       String   @db.Char(36)
  user         User     @relation(fields: [userId], references: [id])
  tokenId      String?  @db.VarChar(191)
  token        Token?   @relation("TokenLedger", fields: [tokenId], references: [id])
  deltaMinutes Int
  reason       String
  ref          String?
  createdAt    DateTime @default(now())

  @@index([userId, createdAt])
}

model Call {
  id          String     @id @default(uuid()) @db.Char(36)
  callerId    String     @db.Char(36)
  caller      User       @relation("CallsOut", fields: [callerId], references: [id])
  calleeId    String     @db.Char(36)
  callee      User       @relation("CallsIn", fields: [calleeId], references: [id])
  startedAt   DateTime?
  endedAt     DateTime?
  chargedMins Int        @default(0)
  isFriday    Boolean
  status      CallStatus
  charges     CallCharge[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([callerId, createdAt])
  @@index([calleeId, createdAt])
}

model CallCharge {
  id        Int      @id @default(autoincrement())
  callId    String   @db.Char(36)
  call      Call     @relation(fields: [callId], references: [id])
  tokenId   String   @db.VarChar(191)
  token     Token    @relation(fields: [tokenId], references: [id])
  minutes   Int
  createdAt DateTime @default(now())

  @@index([callId])
  @@index([tokenId])
}

model Device {
  id        Int      @id @default(autoincrement())
  userId    String   @db.Char(36)
  user      User     @relation(fields: [userId], references: [id])
  platform  Platform
  voipToken String   @unique @db.VarChar(191)
  createdAt DateTime @default(now())

  @@index([userId])
}
